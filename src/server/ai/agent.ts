// src/server/ai/agent.ts
import { runWorkflow, getStatus, notifyTelegram, RunKind, RunResult } from './agent_tools';
import { GeminiLite } from './llm';

const llm = new GeminiLite();

type ActionBtn =
  | { type: 'postback'; label: string; action: string; args?: any }
  | { type: 'open_url'; label: string; url: string };

type HandleInput = {
  text?: string;
  action?: string;
  args?: any;
  trace_id?: string;
  dorm_id?: string;
};

// ‡∏Å‡∏•‡∏∏‡πà‡∏° intent ‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á" (‡πÉ‡∏´‡πâ‡∏¢‡∏¥‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ worker)
const WORKFLOW_ACTIONS = new Set<string>([
  // booking flow
  'booking.create',
  // payment
  'payment.cash',
  'payment.bank',
  // checkin
  'checkin.schedule',
  'checkin.prepare',
  'checkin.confirm',
  // invoice
  'invoice.generate',
  'invoice.generate_initial',
  'invoice.send_batch',
  // misc
  'receipt.issue',
  'contract.issue',
  'meter.baseline',
  'notify.welcome',
  'notify.movein_reminder',
  'reminder.setup_due',
]);

export async function agentHandle(input: HandleInput) {
  const { text, action, args, trace_id, dorm_id } = input || {};

  // A) ‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°" ‚Üí ‡∏¢‡∏¥‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ n8n ‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏û‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  if (action) {
    const run = (await runWorkflow(action, { ...args, trace_id, dorm_id })) as RunResult;

    for (let i = 0; i < 6; i++) {
      await new Promise((r) => setTimeout(r, 1500));
      const st = await getStatus(run.kind, run.id);
      if (st.done) return proposeNext(st.intent, st.result);
    }
    return { message: '‚öôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‚Ä¶ ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥', actions: [] as ActionBtn[] };
  }

  // B) ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"
  const raw = String(text || '').trim();
  if (!raw) return { message: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö?', actions: [] as ActionBtn[] };

  // ‡πÉ‡∏´‡πâ LLM ‡∏ï‡∏µ‡πÄ‡∏à‡∏ï‡∏ô‡∏≤
  const intent = await llm.detectIntent(raw);

  // ‡∏ñ‡πâ‡∏≤ LLM ‡∏à‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô workflow ‚Üí ‡∏¢‡∏¥‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
  if (WORKFLOW_ACTIONS.has(intent)) {
    const run = (await runWorkflow(intent, { ...args, trace_id, dorm_id })) as RunResult;

    for (let i = 0; i < 6; i++) {
      await new Promise((r) => setTimeout(r, 1500));
      const st = await getStatus(run.kind, run.id);
      if (st.done) return proposeNext(st.intent, st.result);
    }
    return { message: '‚öôÔ∏è ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏±‡∏ö‚Ä¶', actions: [] as ActionBtn[] };
  }

  // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà workflow ‚Üí ‡∏ï‡∏≠‡∏ö‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ + ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏õ‡∏∏‡πà‡∏°
  const reply = await llm.proposeMessage({ user: raw });
  return {
    message: reply.message,
    actions: [
      { type: 'postback', label: '‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á', action: 'booking.create', args: {} },
      { type: 'postback', label: '‡∏≠‡∏≠‡∏Å‡∏ö‡∏¥‡∏•‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ', action: 'invoice.generate', args: {} },
    ],
  };
}

/** ‡πÅ‡∏õ‡∏•‡∏á intent ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á ‚Üí ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° + ‡∏õ‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡πÇ‡∏ü‡∏•‡∏ß‡πå) */
function proposeNext(intent: string, result: any) {
  if (intent === 'booking.completed') {
    const amt = Number(result?.amount_due || 0).toLocaleString();
    const bookingId = result?.booking_id || '';
    return {
      message: `‚úÖ ‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞ ${amt} ‡∏ö‡∏≤‡∏ó ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏´‡∏°?`,
      actions: [
        { type: 'postback', label: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î', action: 'payment.cash', args: { booking_id: bookingId } },
        { type: 'postback', label: '‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏ö‡∏ö‡πÇ‡∏≠‡∏ô', action: 'payment.bank', args: { booking_id: bookingId } },
        { type: 'postback', label: '‡∏ï‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤', action: 'checkin.schedule', args: { booking_id: bookingId } },
        { type: 'postback', label: '‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô', action: 'noop', args: {} },
      ] as ActionBtn[],
    };
  }

  if (intent === 'payment.confirmed') {
    const paymentId = result?.payment_id || '';
    const bookingId = result?.booking_id || '';
    return {
      message: `‚úÖ ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏´‡∏°?`,
      actions: [
        { type: 'postback', label: '‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à', action: 'receipt.issue', args: { payment_id: paymentId } },
        { type: 'postback', label: '‡∏≠‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤', action: 'contract.issue', args: { booking_id: bookingId } },
        { type: 'postback', label: '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô', action: 'checkin.prepare', args: { booking_id: bookingId } },
      ] as ActionBtn[],
    };
  }

  if (intent === 'checkin.confirm') {
    const roomId = result?.room_id || '';
    return {
      message: `üß≥ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏´‡πâ‡∏≠‡∏á ${roomId}\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏´‡∏°?`,
      actions: [
        { type: 'postback', label: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô', action: 'meter.baseline', args: { room_id: roomId } },
        { type: 'postback', label: '‡∏≠‡∏≠‡∏Å‡∏ö‡∏¥‡∏•‡πÅ‡∏£‡∏Å', action: 'invoice.generate_initial', args: { room_id: roomId } },
        { type: 'postback', label: '‡∏™‡πà‡∏á‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å', action: 'notify.welcome', args: { room_id: roomId } },
      ] as ActionBtn[],
    };
  }

  if (intent === 'invoice.generated') {
    const invoiceId = result?.invoice_id || '';
    return {
      message: `üßæ ‡∏≠‡∏≠‡∏Å‡∏ö‡∏¥‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏±‡∏ö?`,
      actions: [
        { type: 'postback', label: '‡∏™‡πà‡∏á‡∏ö‡∏¥‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', action: 'invoice.send_batch', args: { invoice_id: invoiceId } },
        { type: 'postback', label: '‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏à‡πà‡∏≤‡∏¢', action: 'reminder.setup_due', args: { invoice_id: invoiceId } },
      ] as ActionBtn[],
    };
  }

  return { message: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö?', actions: [] as ActionBtn[] };
}