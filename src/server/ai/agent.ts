import { GeminiLite } from './llm';
import { runWorkflow, getStatus, notifyTelegram } from './agent_tools';

const llm = new GeminiLite();

type ActionBtn = { type:'postback'|'open_url', label:string, action?:string, args?:any, url?:string };

export async function agentHandle(input: any) {
  const { text, action, args, trace_id, dorm_id } = input || {};

  // A) ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° ‚Üí ‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π‡∏à‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à (‡πÇ‡∏û‡∏• 3‚Äì6 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏û‡∏≠)
  if (action) {
    const run = await runWorkflow(action, { ...args, trace_id, dorm_id });

    for (let i=0; i<6; i++) {
      await new Promise(r => setTimeout(r, 1500));
      const st = await getStatus(run.kind, run.id);
      if (st.done) return proposeNext(st.intent, st.result);
    }
    return { message:'‚öôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‚Ä¶ ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥', actions:[] as ActionBtn[] };
  }

  // B) ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‚Üí ‡∏ï‡∏£‡∏ß‡∏à intent ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏™‡∏ô‡∏≠‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
  const intent = await llm.detectIntent(String(text||''));
  return proposeNext(intent, {});
}

function proposeNext(intent: string, result: any) {
  if (intent === 'booking.completed') {
    const amt = Number(result?.amount_due||0).toLocaleString();
    const bookingId = result?.booking_id || '';
    return {
      message: `‚úÖ ‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞ ${amt} ‡∏ö‡∏≤‡∏ó ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏´‡∏°?`,
      actions: [
        { type:'postback', label:'‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î', action:'payment.cash', args:{ booking_id: bookingId } },
        { type:'postback', label:'‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏ö‡∏ö‡πÇ‡∏≠‡∏ô', action:'payment.bank', args:{ booking_id: bookingId } },
        { type:'postback', label:'‡∏ï‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤', action:'checkin.schedule', args:{ booking_id: bookingId } },
        { type:'postback', label:'‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô', action:'noop' }
      ] as ActionBtn[]
    };
  }

  if (intent === 'payment.confirmed') {
    const paymentId = result?.payment_id || '';
    const bookingId = result?.booking_id || '';
    return {
      message: `‚úÖ ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏´‡∏°?`,
      actions: [
        { type:'postback', label:'‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à', action:'receipt.issue', args:{ payment_id: paymentId } },
        { type:'postback', label:'‡∏≠‡∏≠‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤', action:'contract.issue', args:{ booking_id: bookingId } },
        { type:'postback', label:'‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô', action:'checkin.prepare', args:{ booking_id: bookingId } },
      ] as ActionBtn[]
    };
  }

  if (intent === 'checkin.confirm') {
    const roomId = result?.room_id || '';
    return {
      message: `üß≥ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏´‡πâ‡∏≠‡∏á ${roomId}\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏´‡∏°?`,
      actions: [
        { type:'postback', label:'‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô', action:'meter.baseline', args:{ room_id: roomId } },
        { type:'postback', label:'‡∏≠‡∏≠‡∏Å‡∏ö‡∏¥‡∏•‡πÅ‡∏£‡∏Å', action:'invoice.generate_initial', args:{ room_id: roomId } },
        { type:'postback', label:'‡∏™‡πà‡∏á‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å', action:'notify.welcome', args:{ room_id: roomId } },
      ] as ActionBtn[]
    };
  }

  if (intent === 'invoice.generated') {
    const invoiceId = result?.invoice_id || '';
    return {
      message: `üßæ ‡∏≠‡∏≠‡∏Å‡∏ö‡∏¥‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏±‡∏ö?`,
      actions: [
        { type:'postback', label:'‡∏™‡πà‡∏á‡∏ö‡∏¥‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', action:'invoice.send_batch', args:{ invoice_id: invoiceId } },
        { type:'postback', label:'‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏à‡πà‡∏≤‡∏¢', action:'reminder.setup_due', args:{ invoice_id: invoiceId } },
      ] as ActionBtn[]
    };
  }

  return { message:'‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö?', actions:[] as ActionBtn[] };
}